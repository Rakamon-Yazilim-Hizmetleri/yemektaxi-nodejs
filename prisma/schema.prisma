generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  email                  String    @unique
  password               String
  title                  String?
  restaurantId           String?   @map("restaurant_id") @db.Uuid
  emailVerification      Boolean   @default(false) @map("email_verification")
  phoneVerification      Boolean   @default(false) @map("phone_verification")
  checkIdentity          Boolean   @default(false) @map("check_identity")
  refreshToken           String?   @map("refresh_token")
  refreshTokenExpiryTime DateTime? @map("refresh_token_expiry_time") @db.Timestamptz
  yearOfBirth            Int       @map("year_of_birth")
  phoneNumber            String?   @map("phone_number")
  identityNumber         String?   @map("identity_number")
  address                String?
  imageUrl               String?   @map("image_url")
  lastLoginDate          DateTime  @default(now()) @map("last_login_date") @db.Timestamptz
  isNewUser              Boolean   @default(true) @map("is_new_user")
  isAuthUser             Boolean   @default(false) @map("is_auth_user")
  confirmationStatus     String    @default("Pending") @map("confirmation_status")
  deviceId               String?   @map("device_id")
  status                 String    @default("Active")

  restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id])
  userRoles    UserRole[]
  activityLogs ActivityLog[]
  tickets      Ticket[]

  @@map("users")
}

model Restaurant {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  ownerId                    String  @map("owner_id") @db.Uuid
  name                       String
  phoneNumber                String  @map("phone_number")
  taxNumber                  String? @map("tax_number")
  taxOffice                  String? @map("tax_office")
  email                      String  @map("mail")
  mersisNumber               String? @map("mersis_number")
  registrationNumber         String? @map("registration_number")
  customerServicePhoneNumber String? @map("customer_service_phone_number")
  confirmationStatus         String  @default("Pending") @map("confirmation_status")
  logo                       String?
  imageUrl                   String? @map("image_url")
  mainRestaurantId           String? @map("main_restaurant_id") @db.Uuid
  isOpen                     Boolean @default(true) @map("is_open")
  status                     String  @default("Active")

  users         User[]
  foods         Food[]
  categories    Category[]
  subCategories SubCategory[]
  campaigns     Campaign[]
  options       Option[]

  @@map("restaurants")
}

model Food {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  name                  String
  description           String
  imageUrl              String  @map("image_url")
  restaurantId          String  @map("restaurant_id") @db.Uuid
  priority              String?
  activeTime            String? @map("active_time")
  productsToBeExtracted String? @map("products_to_be_extracted")
  preparationTime       String? @map("preparation_time")
  price                 Float
  discountPrice         Float   @default(0) @map("discount_price")
  confirmationStatus    String  @default("Pending") @map("confirmation_status")
  rejectMessage         String? @map("reject_message")
  status                String  @default("Active")

  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  foodCampaigns  FoodCampaign[]
  foodCategories FoodCategory[]

  @@map("foods")
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  name               String
  description        String?
  imageUrl           String? @map("image_url")
  restaurantId       String  @map("restaurant_id") @db.Uuid
  priority           String?
  confirmationStatus String  @default("Pending") @map("confirmation_status")
  rejectMessage      String? @map("reject_message")
  status             String  @default("Active")

  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  foodCategories FoodCategory[]

  @@map("categories")
}

model SubCategory {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  name               String
  description        String?
  imageUrl           String? @map("image_url")
  restaurantId       String  @map("restaurant_id") @db.Uuid
  priority           String?
  confirmationStatus String  @default("Pending") @map("confirmation_status")
  rejectMessage      String? @map("reject_message")
  status             String  @default("Active")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("sub_categories")
}

model Campaign {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  name               String
  description        String?
  imageUrl           String?  @map("image_url")
  restaurantId       String   @map("restaurant_id") @db.Uuid
  discountPercent    Float    @map("discount_percent")
  startDate          DateTime @map("start_date") @db.Timestamptz
  endDate            DateTime @map("end_date") @db.Timestamptz
  isActive           Boolean  @default(true) @map("is_active")
  minOrderAmount     Float?   @map("min_order_amount")
  maxDiscountAmount  Float?   @map("max_discount_amount")
  usageLimit         Int?     @map("usage_limit")
  usageCount         Int      @default(0) @map("usage_count")
  confirmationStatus String   @default("Pending") @map("confirmation_status")
  rejectMessage      String?  @map("reject_message")
  status             String   @default("Active")

  restaurant    Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  foodCampaigns FoodCampaign[]

  @@map("campaigns")
}

model Option {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  name               String
  description        String?
  imageUrl           String? @map("image_url")
  restaurantId       String  @map("restaurant_id") @db.Uuid
  price              Float
  discountPrice      Float   @default(0) @map("discount_price")
  priority           String?
  activeTime         String? @map("active_time")
  preparationTime    String? @map("preparation_time")
  confirmationStatus String  @default("Pending") @map("confirmation_status")
  rejectMessage      String? @map("reject_message")
  status             String  @default("Active")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("options")
}

// Junction Tables
model FoodCategory {
  id         String @id @default(uuid()) @db.Uuid
  foodId     String @map("food_id") @db.Uuid
  categoryId String @map("category_id") @db.Uuid

  food     Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([foodId, categoryId])
  @@map("food_categories")
}

model FoodCampaign {
  id         String @id @default(uuid()) @db.Uuid
  foodId     String @map("food_id") @db.Uuid
  campaignId String @map("campaign_id") @db.Uuid

  food     Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([foodId, campaignId])
  @@map("food_campaigns")
}

// User Management
model Role {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  name        String  @unique
  description String?

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  roleId String @map("role_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Ticket System
model ProblemType {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?

  tickets Ticket[]

  @@map("problem_types")
}

model Ticket {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz
  updatedDate DateTime @updatedAt @map("updated_date") @db.Timestamptz
  isDeleted   Boolean  @default(false) @map("is_deleted")

  userId        String @map("user_id") @db.Uuid
  problemTypeId String @map("problem_type_id") @db.Uuid
  subject       String
  description   String
  status        String @default("Open")
  priority      String @default("Medium")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemType ProblemType @relation(fields: [problemTypeId], references: [id])

  @@map("tickets")
}

// Activity Log
model ActivityLog {
  id          String   @id @default(uuid()) @db.Uuid
  createdDate DateTime @default(now()) @map("created_date") @db.Timestamptz

  userId      String  @map("user_id") @db.Uuid
  action      String
  entity      String
  entityId    String  @map("entity_id") @db.Uuid
  description String?
  ipAddress   String? @map("ip_address")
  userAgent   String? @map("user_agent")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}
