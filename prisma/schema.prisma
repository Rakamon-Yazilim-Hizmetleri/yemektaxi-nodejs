// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

// Base fields that all entities inherit
model User {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // User specific fields
  firstName              String
  lastName               String
  password               String
  title                  String?
  restaurantId           String?
  emailVerification      Boolean   @default(false)
  phoneVerification      Boolean   @default(false)
  checkIdentity          Boolean   @default(false)
  refreshToken           String?
  refreshTokenExpiryTime DateTime?
  email                  String    @unique
  yearOfBirth            Int
  phoneNumber            String?
  identityNumber         String?
  address                String?
  imageUrl               String?
  lastLoginDate          DateTime
  isNewUser              Boolean   @default(true)
  isAuthUser             Boolean   @default(false)
  confirmationStatus     String
  deviceId               String?

  // Relations
  restaurant         Restaurant?         @relation(fields: [restaurantId], references: [id])
  userRoles          UserRole[]
  customer           Customer?
  otpVerifications   OtpVerification[]
  activityLogs       ActivityLog[]
  createdTickets     Ticket[]            @relation("TicketCreatedBy")
  repliedTickets     FeedBack[]          @relation("FeedBackRepliedBy")
  emailVerifications EmailVerification[]

  @@map("Users")
}

model Restaurant {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Restaurant specific fields
  ownerId                    String
  name                       String
  phoneNumber                String
  taxNumber                  String?
  taxOffice                  String?
  mail                       String
  mersisNumber               String?
  registrationNumber         String?
  customerServicePhoneNumber String?
  confirmationStatus         String?
  logo                       String?
  imageUrl                   String?
  mainRestaurantId           String?
  isOpen                     Boolean @default(false)

  // Relations
  users               User[]
  cuisineRestaurants  CuisineRestaurant[]
  tables              Table[]
  workingHours        RestaurantWorkingHour[]
  files               File[]
  categories          Category[]
  subCategories       SubCategory[]
  foods               Food[]
  options             Option[]
  campaigns           Campaign[]
  areas               Area[]
  roles               Role[]
  ingredients         Ingredient[]
  activityLogs        ActivityLog[]
  tickets             Ticket[]
  feedBacks           FeedBack[]
  addresses           RestaurantAddress[]
  serviceWorkingHours ServiceWorkingHour[]
  restaurantImages    RestaurantImage[]
  restaurantDocuments RestaurantDocuments[]

  @@map("Restaurants")
}

model Category {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Category specific fields
  name               String
  description        String?
  imageUrl           String
  restaurantId       String
  priority           String?
  confirmationStatus String
  rejectMessage      String?

  // Relations
  restaurant            Restaurant            @relation(fields: [restaurantId], references: [id])
  foodCategories        FoodCategory[]
  categorySubCategories CategorySubCategory[]
  optionCategories      OptionCategory[]

  @@map("Categories")
}

model SubCategory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // SubCategory specific fields
  name               String
  description        String
  multipleChoice     Boolean @default(false)
  forcedChoice       Boolean @default(false)
  restaurantId       String
  priority           String?
  confirmationStatus String
  rejectMessage      String?

  // Relations
  restaurant            Restaurant            @relation(fields: [restaurantId], references: [id])
  categorySubCategories CategorySubCategory[]
  optionSubCategories   OptionSubCategory[]
  foodSubCategories     FoodSubCategory[]

  @@map("SubCategories")
}

model Food {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Food specific fields
  name                  String
  description           String
  imageUrl              String
  restaurantId          String
  priority              String?
  activeTime            String?
  productsToBeExtracted String?
  preparationTime       String?
  price                 Float
  discountPrice         Float
  confirmationStatus    String
  rejectMessage         String?

  // Relations
  restaurant               Restaurant                @relation(fields: [restaurantId], references: [id])
  foodCampaigns            FoodCampaign[]
  foodSubCategories        FoodSubCategory[]
  foodCategories           FoodCategory[]
  foodRemovableIngredients FoodRemovableIngredient[]

  @@map("Foods")
}

model Option {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Option specific fields
  name                 String
  imageUrl             String
  stock                Int
  paid                 Boolean @default(false)
  price                Float
  restaurantId         String
  confirmationStatus   String
  rejectMessage        String?
  showInMenuEnrichment Boolean @default(false)

  // Relations
  restaurant                 Restaurant                  @relation(fields: [restaurantId], references: [id])
  optionSubCategories        OptionSubCategory[]
  optionCategories           OptionCategory[]
  optionRemovableIngredients OptionRemovableIngredient[]

  @@map("Options")
}

model Campaign {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Campaign specific fields
  name               String
  description        String
  startDate          DateTime
  endDate            DateTime
  numberOfUses       Int
  usageLimit         Int?
  minOrderAmount     Float
  ratio              Float?
  usageType          String
  restaurantId       String
  confirmationStatus String
  rejectMessage      String?
  code               String?
  banner             String?

  // Relations
  restaurant    Restaurant     @relation(fields: [restaurantId], references: [id])
  foodCampaigns FoodCampaign[]

  @@map("Campaigns")
}

model Cuisine {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Cuisine specific fields
  name     String
  imageUrl String
  priority String

  // Relations
  cuisineRestaurants CuisineRestaurant[]

  @@map("Cuisines")
}

model Area {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Area specific fields
  name               String
  restaurantId       String
  imageUrl           String
  confirmationStatus String
  rejectMessage      String?

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("Areas")
}

model Table {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Table specific fields
  name                String
  capacity            Int
  areaId              String?
  automaticAssignment Boolean @default(false)
  confirmationStatus  String
  rejectMessage       String?
  restaurantId        String

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("Tables")
}

model Customer {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Customer specific fields
  userId String @unique

  // Relations
  user      User              @relation(fields: [userId], references: [id])
  addresses CustomerAddress[]
  feedBacks FeedBack[]

  @@map("Customer")
}

model Role {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Role specific fields
  name         String
  description  String?
  restaurantId String

  // Relations
  restaurant      Restaurant       @relation(fields: [restaurantId], references: [id])
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("Roles")
}

model Permission {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Permission specific fields
  name        String
  description String?

  // Relations
  rolePermissions RolePermission[]

  @@map("Permissions")
}

model Service {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Service specific fields
  name String

  // Relations
  serviceWorkingHours ServiceWorkingHour[]

  @@map("Services")
}

model Ingredient {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  // Ingredient specific fields
  restaurantId String
  name         String
  imageUrl     String
  description  String?

  // Relations
  restaurant                 Restaurant                  @relation(fields: [restaurantId], references: [id])
  foodRemovableIngredients   FoodRemovableIngredient[]
  optionRemovableIngredients OptionRemovableIngredient[]

  @@map("Ingredients")
}

// Junction Tables
model UserRole {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  userId String
  roleId String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("UserRoles")
}

model RolePermission {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("RolePermissions")
}

model FoodCategory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  categoryId String
  foodId     String

  category Category @relation(fields: [categoryId], references: [id])
  food     Food     @relation(fields: [foodId], references: [id])

  @@unique([categoryId, foodId])
  @@map("FoodCategories")
}

model FoodSubCategory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  foodId        String
  subCategoryId String

  food        Food        @relation(fields: [foodId], references: [id])
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])

  @@unique([foodId, subCategoryId])
  @@map("FoodSubCategories")
}

model CategorySubCategory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  categoryId    String
  subCategoryId String

  category    Category    @relation(fields: [categoryId], references: [id])
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])

  @@unique([categoryId, subCategoryId])
  @@map("CategorySubCategories")
}

model OptionCategory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  optionId   String
  categoryId String

  option   Option   @relation(fields: [optionId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([optionId, categoryId])
  @@map("OptionCategories")
}

model OptionSubCategory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  optionId      String
  subCategoryId String

  option      Option      @relation(fields: [optionId], references: [id])
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])

  @@unique([optionId, subCategoryId])
  @@map("OptionSubCategories")
}

model CuisineRestaurant {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  cuisineId    String
  restaurantId String

  cuisine    Cuisine    @relation(fields: [cuisineId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([cuisineId, restaurantId])
  @@map("CuisineRestaurants")
}

model FoodCampaign {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  foodId     String
  campaignId String

  food     Food     @relation(fields: [foodId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@unique([foodId, campaignId])
  @@map("FoodCampaigns")
}

model FoodRemovableIngredient {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  foodId       String
  ingredientId String

  food       Food       @relation(fields: [foodId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([foodId, ingredientId])
  @@map("FoodRemovableIngredients")
}

model OptionRemovableIngredient {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  optionId     String
  ingredientId String

  option     Option     @relation(fields: [optionId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([optionId, ingredientId])
  @@map("OptionRemovableIngredients")
}

// Address and Working Hours
model RestaurantAddress {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  restaurantId    String
  address         String?
  optionalAddress String?
  city            String?
  district        String?
  latitude        Float
  longitude       Float
  neighbourhood   String?
  postalCode      String?

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("RestaurantAddresses")
}

model RestaurantWorkingHour {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  restaurantId String
  dayOfWeek    String
  openingTime  DateTime?
  closingTime  DateTime?

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("RestaurantWorkingHours")
}

model CustomerAddress {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  customerId      String
  address         String
  optionalAddress String?
  latitude        Float
  longitude       Float
  city            String
  district        String
  neighbourhood   String
  postalCode      String

  customer Customer @relation(fields: [customerId], references: [id])

  @@map("CustomerAddresses")
}

model ServiceWorkingHour {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  restaurantId String
  serviceId    String
  dayOfWeek    String
  openingTime  String // TimeSpan as string
  closingTime  String // TimeSpan as string
  isOpen       Boolean

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])

  @@map("ServiceWorkingHours")
}

// Support and Activity
model ActivityLog {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  userId       String
  restaurantId String
  action       String
  ipAddress    String
  userAgent    String

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("ActivityLogs")
}

model ProblemType {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  name String

  tickets Ticket[]

  @@map("ProblemTypes")
}

model Ticket {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  title         String
  priority      String
  createdUserId String
  restaurantId  String
  problemTypeId String
  closedAt      DateTime?

  createdUser     User             @relation("TicketCreatedBy", fields: [createdUserId], references: [id])
  restaurant      Restaurant       @relation(fields: [restaurantId], references: [id])
  problemType     ProblemType      @relation(fields: [problemTypeId], references: [id])
  ticketResponses TicketResponse[]

  @@map("Tickets")
}

model TicketResponse {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  ticketId String
  message  String
  userId   String

  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@map("TicketResponses")
}

model FeedBack {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  customerId   String
  restaurantId String
  comment      String
  reply        String?
  replyAt      DateTime
  rating       Float
  orderId      String
  replyUserId  String?

  customer   Customer   @relation(fields: [customerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  replyUser  User?      @relation("FeedBackRepliedBy", fields: [replyUserId], references: [id])

  @@map("FeedBacks")
}

// Files and Verification
model File {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  restaurantId String
  fileName     String
  filePath     String

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("Files")
}

model RestaurantImage {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  restaurantId String
  imageUrl     String

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("RestaurantImages")
}

model RestaurantDocuments {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  restaurantId String
  documentUrl  String

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("RestaurantDocuments")
}

model OtpVerification {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  userId       String
  phoneNumber  String
  otpCode      String
  verification Boolean  @default(false)
  generateDate DateTime
  uniqueKey    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("OtpVerifications")
}

model EmailVerification {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  email      String
  token      String
  expiryDate DateTime
  userId     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("EmailVerifications")
}

model Enum {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  name  String
  value String

  @@map("Enums")
}

// History Tables (for audit purposes)
model CategoryHistory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  originalId   String
  name         String
  description  String?
  imageUrl     String
  restaurantId String

  @@map("CategoryHistories")
}

model SubCategoryHistory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  originalId  String
  name        String
  description String

  @@map("SubCategoryHistories")
}

model OptionHistory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  originalId String
  name       String
  imageUrl   String
  stock      Int
  paid       Boolean
  price      Float

  @@map("OptionHistories")
}

model FoodHistory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  originalId    String
  name          String
  description   String
  imageUrl      String
  restaurantId  String
  price         Float
  discountPrice Float

  @@map("FoodHistories")
}

model CampaignHistory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  originalId     String
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime
  numberOfUses   Int
  minOrderAmount Float
  ratio          Float?
  usageType      String
  restaurantId   String

  @@map("CampaignHistories")
}

model AreaHistory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  originalId String
  name       String

  @@map("AreaHistories")
}

model TableHistory {
  id          String   @id @default(cuid())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String
  updatedBy   String

  originalId          String
  name                String
  capacity            Int
  areaId              String?
  automaticAssignment Boolean
  restaurantId        String

  @@map("TableHistories")
}
